name: Deploy Portfolio Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint --if-present
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Create production environment file
      run: |
        cd frontend
        echo "REACT_APP_API_URL=${{ secrets.API_URL }}" > .env.production
        echo "GENERATE_SOURCEMAP=false" >> .env.production
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 1

  deploy-frontend:
    name: Deploy Frontend to AWS S3
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: build/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to S3
      run: |
        aws s3 sync build/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

  deploy-backend:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd /opt/portfolio
          
          # Pull latest changes
          git pull origin main
          
          # Install/update backend dependencies
          cd backend
          npm install --production
          
          # Restart application
          pm2 restart portfolio-api
          
          # Check application status
          pm2 status
          
          # Wait for application to start
          sleep 10
          
          # Health check
          curl -f http://localhost:5000/api/health || exit 1
          
          echo "Backend deployment completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Frontend: https://${{ secrets.CLOUDFRONT_DOMAIN }}"
        echo "Backend: https://${{ secrets.API_DOMAIN }}"
    
    - name: Notify failure
      if: needs.deploy-frontend.result == 'failure' || needs.deploy-backend.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for more details."
        exit 1
