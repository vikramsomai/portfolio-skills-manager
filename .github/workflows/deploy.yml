name: Deploy Portfolio App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci

    - name: Lint Frontend
      run: |
        cd frontend
        npm run lint --if-present

    - name: Build Frontend
      run: |
        cd frontend
        echo "REACT_APP_API_URL=${{ secrets.API_URL }}" > .env.production
        echo "GENERATE_SOURCEMAP=false" >> .env.production
        npm run build

    - name: Upload Frontend Build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 1

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: build/

    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: aws s3 sync build/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd /opt/portfolio
          git pull origin main
          cd backend
          npm install --production
          pm2 restart portfolio-api || pm2 start server.js --name portfolio-api
          echo "Backend deployed successfully"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always()

    steps:
    - name: Notify success
      if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
      run: |
        echo "Deployment successful!"
        echo "Frontend: https://${{ secrets.CLOUDFRONT_DOMAIN }}"
        echo "Backend: https://${{ secrets.API_DOMAIN }}"

    - name: Notify failure
      if: needs.deploy-frontend.result == 'failure' || needs.deploy-backend.result == 'failure'
      run: |
        echo "Deployment failed!"
        exit 1
